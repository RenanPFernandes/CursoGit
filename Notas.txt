Git e GitHub

I) Introdução
Git faz snapshot de todos os arquivos em cada versão, ao contrário do SVN que guarda as difs entre cada versão
Git nasceu para versionamento do Linux, após quebra com a BitKeeper
Git config - Geral
Git config user - Usuário
Git config projeto - Projeto

II) File Lifecycle
Untracked: arquivo acabou de ser adicionado no repositório, mas ainda não foi visto pelo Git. Não foi dado o commit?
Unmodified: arquivo já commitado e parte do repositório, sem alterações quando comparado com o que está no repositório do Git
Modified: arquivo do repositório com modificações
Staged: área onde será criada a versão quando for dado o commit, tipo aquela lista de checagem de modificaçoes que o SVN tem no pré-commit

Untracked > ADD FILE > Unmodified
Unmodified > REMOVE FILE > Untracked
Unmodified > EDIT > Modified
Modified > STAGE FILE > Staged
Staged > COMMIT > Unmodified

III) Comandos Git
git status: status da pasta (semelhante a opção de check for modifications do SVN)
git add: adiciona um untracked para ser commitado (staging)
    Se, depois que dei o add em um arquivo, eu modificar esse arquivo sem dar o commit, o que vai ser commitado é a primeira versão, náo as com alterações!!!
    Para que as modificações sejam commitadas, em vez do arquivo original, precisa dar git add de novo!
git commit: dá o commit das atuais alterações etc, criando o snapshot
    1) -m "Mensagem": para incluir uma mensagem de comentário do commit
    2) [master (root-commit) XXXXXX] Mensagem
          master (root-commit): local onde foi feito o commit
          XXXXXXX: número do commit 
          Mensagem: Comentário do commit
    3) se der commit sem antes ter dado o add das moficições, emite um erro avisando "Changes not staged for commit"e não faz nada
    4) -am "Mensagem": adiciona e da commit automaticamente se o arquivo já existir no repositório 
git log: emite o log dos commits do projeto
    1) Apresenta a Hash do Commit, o autor, data e comentário
    2) --decorate: mais informações, como tags e branches
    3) --author="Name": filtrar apenas commits de um autor
    4) git shortlog: informaçoes da quantidade de commits de cada autor, de cada commit etc
       git shortlog - sn: autor e quantidade de commits
    5) --graph: mostra em forma gráfica branches, versões e trunk
git show HASH: mostra mais informações de cada commit identificado pela hashtag do commit
git diff: mostra a modificação
    1) --name-only: diz apenas o nome do arquivo modificado
git checkout ARQUIVO: revert das mudanças aatuais para a versão mais recente do repositório
git reset HEAD ARQUIVO: remove o arquivo do staged, mas mantém as mudanças realizadas, diferentemente do checkout
    1) Se não colocar o ARQUIVO, ele faz o reset HEAD para todos os arquivos da pasta

CHECKOUT != RESET > Beware!!!! O reset não desfaz as alterações locais, o checkout desfaz

git reset --TYPE HASH: desfaz um commit feito APÓS a HASH! Ou seja, se quer remover o commit XXXX, colocar a HASH do commit imediatamente anterior
    1) --soft: some com o commit da HASH, mantendo o arquivo no staged com as alterações locais
    2) --mixed: some com o commit da HASH, retirando o arquivo da staged, mas mantendo as alterações locais, ou seja, modified
    3) --hard: BALEFIRE NO COMMIT! O Commit deixa de existir e as alterações também

IV) GitHub
Chave SSH: criado um arquivo id_rsa.pub que deve ser copiado para o GitHub, na parte de Settings > SSH Key.
    Permite git push etc do GitHub
    É necessário uma chave dessa para cada computador que vai acessar o GitHub
Acessando o repositório remoto do GitHub
    git remote add origin git@github.com:RenanPFernandes/CursoGit.git (tem que ser feito na pasta do repositório local do Git)
Passando o repositório local para o GitHub
    git push -u origin master: envia todo o log e todos os arquivos do repositório local para o remoto
Subindo modificações para o GitHub
    git push origin master: envia as alteraçoes do repositorio local master para o remoto origin
Clonando repositórios remotos (git clone)
    git clone git@github.com:RenanPFernandes/CursoGit.git NovoNomePasta: vai copiar todo o repositório remoto do link para um repositório local
        Esse comando é feito na pasta onde vai ficar o novo repositório (cria a pasta nova automaticamente)
Fork: pega um projeto que não é meu e faz uma cópia dele pra mim. Permite que eu faça uma cópia de um repositório de outra pessoa, altere ele e depois envie as alteraçõeses para o dono, para que ele possa incluir ou nao as alteracoes
    Diferente do clone, em que eu só posso fazer de repositórios que eu sou dono.

V) Branches
Definição: ponteiro móvel que leva para um commit
master = trunk
Criando um branch
    git checkout -b NOMEdoBRANCH: cria um novo branch
    git branch: mostra os branchs atuais e em qual estou trabalhando (com um *)
    git chechkout NOMEdoBRANCH: muda o local de trabalho para o NOMEdoBRANCH
    git branch -D NOMEdoBRANCH: deleta o branch
União de branches
    Merge: cria um commit extra, juntando os commits de dois branchs
       Pró: operaçao não destrutiva (não estraga os logs dos branchs)
       Contra: criação de um commit dummy/inútil e poluição dos logs
       git merge NOMEdoBRANCH: comando dado no branch que se deseja juntar tudo (o master por exemplo) e que faz o merge com o NOMEdoBRANCH
    Rebase: move o commit de um branch para a "fila" dos commits do outro branch, deixando tudo linear (processo de fastfoward). Desse modo, os branchs passam a apontar para o mesmo commit
       Contra: perde ordem cronológica
       Pró: evita commits extras e log linear
       git rebase NOMEdoBRANCH: comando dado no branch que se deseja juntar tudo (o master por exemplo) e que faz o rebase com o NOMEdoBRANCH